import <std/library>
import <std/io>

namespace EventTypeSf {
    alias sfEvtClosed = 0;
    alias sfEvtResized = 1;
    alias sfEvtLostFocus = 2;
    alias sfEvtGainedFocus = 3;     
    alias sfEvtTextEntered = 4;          
    alias sfEvtKeyPressed = 5;           
    alias sfEvtKeyReleased = 6;          
    alias sfEvtMouseWheelMoved = 7;       
    alias sfEvtMouseWheelScrolled = 8;  
    alias sfEvtMouseButtonPressed = 9;   
    alias sfEvtMouseButtonReleased = 10;  
    alias sfEvtMouseMoved = 11;         
    alias sfEvtMouseEntered = 12;         
    alias sfEvtMouseLeft = 13;             
    alias sfEvtJoystickButtonPressed = 14;
    alias sfEvtJoystickButtonReleased = 15;
    alias sfEvtJoystickMoved = 16;
    alias sfEvtJoystickConnected = 17;
    alias sfEvtJoystickDisconnected = 18;
    alias sfEvtTouchBegan = 19;        
    alias sfEvtTouchMoved = 20;            
    alias sfEvtTouchEnded = 21;    
    alias sfEvtSensorChanged = 22;

    alias sfEvtCount = 23;
}
namespace rc {
    struct VideoMode {
        int width;
        int height;
        int bitsPerPixel;

        rc::VideoMode* this(int width, int height, int bitsPerPixel) {
            this.width = width;
            this.height = height;
            this.bitsPerPixel = bitsPerPixel;
        } => this;
    }
    struct Event {
		int sus = 1;
    }
}

namespace rci {
    //extern(linkname: "sfRenderWindow_create") long* createRWindow(rc::VideoMode* mode, char* title, int style, long* par);
    long*(rc::VideoMode*, char*, int, long*) createWindow;
    //void* createWindow;
    //macro mCreateWindow {
	//    long*(rc::VideoMode*, char*, int, long*) m = cast(long*(rc::VideoMode*, char*, int, long*))rci::createWindow;
	//    m(#0,#1,#2,#3);
	//}
	//extern(linkname: "sfRenderWindow_isOpen") bool isOpen(long* windowptr);
}

namespace rc {
	void* libgraphics;
	
	void carcasityInit()
	{
		// Load all SFML libraries
	    rc::libgraphics = std::library::open("./libsfml/graphics.so",1);
	    if (rc::libgraphics == null) {
	        std::printf("dlopen() error: %s\n", std::library::error());
			std::exit(1);
	    }

	    // Load all functions
	    rci::createWindow = cast(long*(rc::VideoMode*, char*, int, long*))std::library::sym(rc::libgraphics, "sfRenderWindow_create");
	}

	void carcasityEnd()
	{
		std::library::close(rc::libgraphics);
	}
	
    struct RenderWindow {
        long* handle;

        rc::RenderWindow* this(rc::VideoMode* mode, char* title, int style) {
            this.handle = rci::createWindow(mode, title, style, cast(long*)0);
        } => this;

        //bool isOpen() => rci::isOpen(this.handle);
    }


     
    alias StyleNone             = 0;        ///< No border / title bar (this flag and all others are mutually exclu>
    alias StyleTitlebar         = 1;        ///< Title bar + fixed border
    alias StyleResize           = 2;        ///< Titlebar + resizable border + maximize button
    alias StyleClose            = 4;        ///< Titlebar + close button
    alias StyleFullscreen       = 8;        ///< Fullscreen mode (this flag and all others are mutually exclusive)
    //alias StyleDefaultStyle   = sfTitlebar | sfResize | sfClose; ///< Default window style

}
